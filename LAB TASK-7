KNAPSACK USING GREEDY APPRAOCH:
_______________________________________________________________________________________

#include <stdio.h> 
struct Item {
    int profit;
    int weight;
    double ratio;
};
void swap(struct Item *a, struct Item *b) {
    struct Item temp = *a;
    *a = *b;
    *b = temp;
}
void sortItems(struct Item items[], int n, int strategy) {
    int i, j, condition;
    for (i = 0; i < n - 1; i++) {
        for (j = 0; j < n - i - 1; j++) {
            condition = 0;
            if (strategy == 1) {
                condition = (items[j].profit < items[j+1].profit);
            } else if (strategy == 2) {
                condition = (items[j].weight > items[j+1].weight);
            } else if (strategy == 3) {
                condition = (items[j].ratio < items[j+1].ratio);
            }
            if (condition) {
                swap(&items[j], &items[j+1]);
            }
        }
    }
}
double fractionalKnapsack(struct Item items[], int n, int capacity, int strategy, int *finalWeight, double solution[]) {
    int i;
    double fraction;
    double totalProfit = 0.0;
    int currentWeight = 0;
    for (i = 0; i < n; i++) {
        solution[i] = 0.0;
    }
    sortItems(items, n, strategy);
    for (i = 0; i < n; i++) {
        if (capacity == 0) break;
        if (items[i].weight <= capacity) {
            capacity -= items[i].weight;
            totalProfit += items[i].profit;
            currentWeight += items[i].weight;
            solution[i] = 1.0;
            printf("Taking full item (Profit=%d, Weight=%d)\n", items[i].profit, items[i].weight);
        }
		 else {
            fraction = (double)capacity / items[i].weight;
            totalProfit += items[i].profit * fraction;
            currentWeight += capacity;
            solution[i] = fraction;
            printf("Taking %.2f fraction of item (Profit=%d, Weight=%d)\n",
                   fraction, items[i].profit, items[i].weight);
            capacity = 0;
        }
    }
    *finalWeight = currentWeight;
    return totalProfit;
}
int main() {
    int i, n, capacity, finalWeight;
    double profit1, profit2, profit3;
    printf("Enter number of items: ");
    scanf("%d", &n);
    printf("Enter knapsack capacity: ");
    scanf("%d", &capacity);
    struct Item items[n];
    double solution[n];
    printf("Enter weights of %d items: ", n);
    for (i = 0; i < n; i++) {
        scanf("%d", &items[i].weight);
    }
    printf("Enter profits of %d items: ", n);
    for (i = 0; i < n; i++) {
        scanf("%d", &items[i].profit);
    }
    for (i = 0; i < n; i++) {
        items[i].ratio = (double)items[i].profit / items[i].weight;
    }
    printf("\nStrategy 1: Max Profit first\n");
    profit1 = fractionalKnapsack(items, n, capacity, 1, &finalWeight, solution);
    printf("Maximum Profit: %.2f\n", profit1);
    printf("Solution Vector: (");
    for (i = 0; i < n; i++) {
        printf("%.2f", solution[i]);
        if (i < n - 1) printf(", ");
    }
    printf(")\n");
    printf("\nStrategy 2: Min Weight first\n");
    profit2 = fractionalKnapsack(items, n, capacity, 2, &finalWeight, solution);
    printf("Total Weight in Bag: %d\n", finalWeight);
    printf("Solution Vector: (");
    for (i = 0; i < n; i++) {
        printf("%.2f", solution[i]);
        if (i < n - 1) printf(", ");
    }
    printf(")\n");
    printf("\nStrategy 3: Max Profit/Weight ratio first\n");
    profit3 = fractionalKnapsack(items, n, capacity, 3, &finalWeight, solution);
    printf("Maximum Profit: %.2f\n", profit3);
    printf("Solution Vector: (");
    for (i = 0; i < n; i++) {
        printf("%.2f", solution[i]);
        if (i < n - 1) printf(", ");
    }
    printf(")\n");
    return 0;
}
