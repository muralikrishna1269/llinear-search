TOWERS OF HANOI
a)iterative way
_________________________________________
#include <stdio.h>
#include <math.h>

typedef struct {
    int items[64];
    int top;
} Stack;

void push(Stack* s, int item) {
    s->top++;
    s->items[s->top] = item;
}

int pop(Stack* s) {
    if (s->top == -1)
        return -1;
    return s->items[s->top--];
}

void moveDisk(char from, char to, int disk) {
    printf("Move disk %d from %c to %c\n", disk, from, to);
}

void moveDisksBetweenPoles(Stack* from, Stack* to, char f, char t) {
    int fromTop = (from->top == -1) ? -1 : from->items[from->top];
    int toTop = (to->top == -1) ? -1 : to->items[to->top];

    if (fromTop == -1) {
        int disk = pop(to);
        push(from, disk);
        moveDisk(t, f, disk);
    }
    else if (toTop == -1) {
        int disk = pop(from);
        push(to, disk);
        moveDisk(f, t, disk);
    }
    else if (fromTop > toTop) {
        int disk = pop(to);
        push(from, disk);
        moveDisk(t, f, disk);
    }
    else {
        int disk = pop(from);
        push(to, disk);
        moveDisk(f, t, disk);
    }
}

void iterativeHanoi(int num_disks, char initial_peg, char destination_peg, char intermediate_peg) {
    Stack initial, destination, intermediate;
    initial.top = destination.top = intermediate.top = -1;

    int total_moves = pow(2, num_disks) - 1;

    if (num_disks % 2 == 0) {
        char temp = destination_peg;
        destination_peg = intermediate_peg;
        intermediate_peg = temp;
    }

    for (int i = num_disks; i >= 1; i--)
        push(&initial, i);

    for (int i = 1; i <= total_moves; i++) {
        if (i % 3 == 1)
            moveDisksBetweenPoles(&initial, &destination, initial_peg, destination_peg);
        else if (i % 3 == 2)
            moveDisksBetweenPoles(&initial, &intermediate, initial_peg, intermediate_peg);
        else if (i % 3 == 0)
            moveDisksBetweenPoles(&intermediate, &destination, intermediate_peg, destination_peg);
    }
}

int main() {
    int n;

    printf("Enter the number of disks: ");
    scanf("%d", &n);

    printf("\nIterative Tower of Hanoi:\n");
    iterativeHanoi(n, 'I', 'D', 'M');

    return 0;
}
________________________________________________________________________________
b) recursive way
#include<stdio.h>
void towersofhanoi(int n,char initial,char destination,char intermediate){
	if(n==1){
		printf("\nmoved disk from %c to %c",initial,destination);
		return;
	}
	towersofhanoi(n-1,initial,intermediate,destination);
	printf("\nMoved disk from %c to %c",initial,destination);
	towersofhanoi(n-1,intermediate,destination,initial);
}
int main()
{
    int n=3;
    printf("Recursive of towersofhanoi\n");
	towersofhanoi(n,'I','D','M');
	return 0;
	}
_______________________________________________________________________________________

2)  STACK IMPLEMENTATION USING ARRAY

#include <stdio.h>
#include <stdlib.h>
#define MAX 100

int stack[MAX], top = -1;

void push(int val) {
    if (top == MAX - 1) {
        printf("\nStack Overflow! Cannot push %d\n", val);
    } else {
        stack[++top] = val;
        printf("\n%d pushed to stack\n", val);
    }
}

void pop() {
    if (top == -1) {
        printf("\nStack Underflow! Nothing to pop\n");
    } else {
        printf("\n%d popped from stack\n", stack[top--]);
    }
}

void peek() {
    if (top == -1) {
        printf("\nStack is empty!\n");
    } else {
        printf("\nTop element is: %d\n", stack[top]);
    }
}

void display() {
    if (top == -1) {
        printf("\nStack is empty!\n");
    } else {
        printf("\nStack elements are:\n");
        for (int i = top; i >= 0; i--) {
            printf("%d\n", stack[i]);
        }
    }
}

int main() {
    int choice, val;
    while (1) {
        printf("\n--- Stack Menu ---\n");
        printf("1. Push\n");
        printf("2. Pop\n");
        printf("3. Peek\n");
        printf("4. Display\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter value to push: ");
                scanf("%d", &val);
                push(val);
                break;
            case 2:
                pop();
                break;
            case 3:
                peek();
                break;
            case 4:
                display();
                break;
            case 5:
                exit(0);
            default:
                printf("\nInvalid choice! Try again.\n");
        }
    }
    return 0;
}
