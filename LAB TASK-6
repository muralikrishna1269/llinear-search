1)quick sort
__________________________________________________________________________

#include <stdio.h>
void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}
int partition(int arr[], int low, int high) {
    int pivot = arr[low];
    int i = low;
    int j = high;
    while (i < j) {
        while (arr[i] <= pivot && i < high) {
            i++;
        }
        while (arr[j] > pivot && j > low) {
            j--;
        }
        if (i < j) {
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[low], &arr[j]);
    return j;
}
void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}
void printArray(int arr[], int size) {
	int i;
    for ( i = 0; i < size; i++)
        printf("%d ", arr[i]);
    printf("\n");
}
int main() {
    int arr[] = {69,72,143,1319,5};
    int n = sizeof(arr) / sizeof(arr[0]);
    printf("Original array: ");
    printArray(arr, n);
    quickSort(arr, 0, n - 1);
    printf("Sorted array:   ");
    printArray(arr, n);
    return 0;
}
--------------------------------------------------------------------------------------------------------------------

2)strassen's algorithm
________________________
#include <stdio.h>
#include <stdlib.h>
int** allocateMatrix(int n) {
    int i, j;
    int** matrix = (int**)malloc(n * sizeof(int*));
    for (i = 0; i < n; i++)
        matrix[i] = (int*)malloc(n * sizeof(int));
    return matrix;
}
void freeMatrix(int** matrix, int n) {
    int i;
    for (i = 0; i < n; i++)
        free(matrix[i]);
    free(matrix);
}
void add(int** A, int** B, int** C, int n) {
    int i, j;
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            C[i][j] = A[i][j] + B[i][j];
}
void subtract(int** A, int** B, int** C, int n) {
    int i, j;
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            C[i][j] = A[i][j] - B[i][j];
}
void standardMultiply(int** A, int** B, int** C, int n) {
    int i, j, k;
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++) {
            C[i][j] = 0;
            for (k = 0; k < n; k++)
                C[i][j] += A[i][k] * B[k][j];
        }
}
void strassenMultiply(int** A, int** B, int** C, int n) {
    int i, j;
    if (n <= 2) {
        standardMultiply(A, B, C, n);
        return;
    }
    int newSize = n / 2;
    int **A11 = allocateMatrix(newSize), **A12 = allocateMatrix(newSize),
        **A21 = allocateMatrix(newSize), **A22 = allocateMatrix(newSize);
    int **B11 = allocateMatrix(newSize), **B12 = allocateMatrix(newSize),
        **B21 = allocateMatrix(newSize), **B22 = allocateMatrix(newSize);
    int **C11 = allocateMatrix(newSize), **C12 = allocateMatrix(newSize),
        **C21 = allocateMatrix(newSize), **C22 = allocateMatrix(newSize);
    int **M1 = allocateMatrix(newSize), **M2 = allocateMatrix(newSize),
        **M3 = allocateMatrix(newSize), **M4 = allocateMatrix(newSize),
        **M5 = allocateMatrix(newSize), **M6 = allocateMatrix(newSize),
        **M7 = allocateMatrix(newSize);
    int **AResult = allocateMatrix(newSize);
    int **BResult = allocateMatrix(newSize);
    for (i = 0; i < newSize; i++) {
        for (j = 0; j < newSize; j++) {
            A11[i][j] = A[i][j];
            A12[i][j] = A[i][j + newSize];
            A21[i][j] = A[i + newSize][j];
            A22[i][j] = A[i + newSize][j + newSize];
            B11[i][j] = B[i][j];
            B12[i][j] = B[i][j + newSize];
            B21[i][j] = B[i + newSize][j];
            B22[i][j] = B[i + newSize][j + newSize];
        }
    }
    add(A11, A22, AResult, newSize);
    add(B11, B22, BResult, newSize);
    strassenMultiply(AResult, BResult, M1, newSize);
    add(A21, A22, AResult, newSize);
    strassenMultiply(AResult, B11, M2, newSize);
    subtract(B12, B22, BResult, newSize);
    strassenMultiply(A11, BResult, M3, newSize);
    subtract(B21, B11, BResult, newSize);
    strassenMultiply(A22, BResult, M4, newSize);
    add(A11, A12, AResult, newSize);
    strassenMultiply(AResult, B22, M5, newSize);
    subtract(A21, A11, AResult, newSize);
    add(B11, B12, BResult, newSize);
    strassenMultiply(AResult, BResult, M6, newSize);
    subtract(A12, A22, AResult, newSize);
    add(B21, B22, BResult, newSize);
    strassenMultiply(AResult, BResult, M7, newSize);
    add(M1, M4, AResult, newSize);
    subtract(AResult, M5, BResult, newSize);
    add(BResult, M7, C11, newSize);
    add(M3, M5, C12, newSize);
    add(M2, M4, C21, newSize);
    subtract(M1, M2, AResult, newSize);
    add(AResult, M3, BResult, newSize);
    add(BResult, M6, C22, newSize);
    for (i = 0; i < newSize; i++) {
        for (j = 0; j < newSize; j++) {
            C[i][j] = C11[i][j];
            C[i][j + newSize] = C12[i][j];
            C[i + newSize][j] = C21[i][j];
            C[i + newSize][j + newSize] = C22[i][j];
        }
    }
    freeMatrix(A11, newSize);
    freeMatrix(A12, newSize);
    freeMatrix(A21, newSize);
    freeMatrix(A22, newSize);
    freeMatrix(B11, newSize);
    freeMatrix(B12, newSize);
    freeMatrix(B21, newSize);
    freeMatrix(B22, newSize);
    freeMatrix(C11, newSize);
    freeMatrix(C12, newSize);
    freeMatrix(C21, newSize);
    freeMatrix(C22, newSize);
    freeMatrix(M1, newSize);
    freeMatrix(M2, newSize);
    freeMatrix(M3, newSize);
    freeMatrix(M4, newSize);
    freeMatrix(M5, newSize);
    freeMatrix(M6, newSize);
    freeMatrix(M7, newSize);
    freeMatrix(AResult, newSize);
    freeMatrix(BResult, newSize);
}
void printMatrix(int** matrix, int n) {
    int i, j;
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++)
            printf("%d ", matrix[i][j]);
        printf("\n");
    }
}
int main() {
    int n, i, j;
    printf("Enter the size of the square matrices (power of 2): ");
    scanf("%d", &n);
    int** A = allocateMatrix(n);
    int** B = allocateMatrix(n);
    int** C = allocateMatrix(n);
    printf("Enter elements of matrix A:\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            scanf("%d", &A[i][j]);
    printf("Enter elements of matrix B:\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            scanf("%d", &B[i][j]);
    strassenMultiply(A, B, C, n);
    printf("Result of matrix multiplication:\n");
    printMatrix(C, n);
    freeMatrix(A, n);
    freeMatrix(B, n);
    freeMatrix(C, n);
    return 0;
}
